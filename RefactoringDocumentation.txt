Bad Smells

Detected:

Name            Rank    Class           Location/Details

--Long Method--  1      TigrParser          parse
Temporary Field  5      TigrParser          source, regex_pattern 
Inappropriate           TigrParser/         using __getattr__, must be a better way
    Intimacy     3          TurtleDrawer        to handle this
Duplication      6      TurtleDrawer        draw_line, go_along, go_down
Divergent Change 2      TigrParser          Parsing + exception handling
Speculative      4      Abstract classes    The fact that there is only one sub class for each
    Generality                                  of the abstract classes provided by Mike

Documented:

Bad Smell 1:
Name:       Long Method
Category:   Bloater
Location:   TIGr-TigrParser.py-TigrParser-parse-line 28-78
Reasons:    
            1. Method is too long by several standards - 50 lines, and doesn't fit on a single screen
            2. It is not very easy to understand everything the method is doing and why without a fair amount of reading
            3. There are other bad smells to TigrParser that will be harder to refactor because this method is so long, or are possibly only a problem because nearly everything the class does is handled by the one method.
            
Strategies: Extract Method, Decompose Conditional,
            Method Object (It's half there already, a couple more steps to add from this could be useful before applying Extract Method)
            
            
Bad Smell 2:
Name:       Divergent Change
Category:   Change Preventer
Location:   TIGr-TigrParser.py-TigrParser-parse,_parse_line,_prepare_command, _exectute_command-lines 50-57, 83-84,98,107
Reasons:
            1. This class is supposed to be mainly responsible for parsing the source code that it has been given, and this has also extended to throwing errors when things go wrong. While this originally seemed reasonable, it now gives the class multiple reasons to change - when the parsing needs to change, or when the exception handling (eg how line numbers are displayed to the user) needs to change
            2. If a new way of parsing wanted to be implemented (eg a different sub class for AbstractParser), the exception handling code would need to be reimplemented
            3. The exception throwing code is scattered throughout the class, and it all has it's own way of adding the line/line number to display to the  - inconsistency
            4. This has resulted in pieces of information being used all throughout the class that may not otherwise need to be (current_line_number, current_line)
            5. This all makes the output, and the class itself a bit more confusing than it may otherwise need to be
Strategies: Extract Method? To help tidy up the class,
            Extract Class (once the method/class has been reworked)


Refactoring Evaluations:

Bad Smell 1:
Name:
    Long Method
Category:
    Bloater
Original Location:
    TIGr-TigrParser.py-TigrParser-parse-line 28-78
    
Why was it the worst?
    This smell was the worst because the one really long method had a bunch of other bad smells in it that would be much harder to extract and cure while they were all tangled up together. 

Version Control:
    Commits from: https://github.com/Kelzling/pr301-assignment2/commit/dc7fb843ce09742123e4e497eacc7ccc0b37421d
    To: https://github.com/Kelzling/pr301-assignment2/commit/d9eadf2ac66a4bf6de58e58c22e09a7f230118db
    Total Number: 8

Refactoring Steps Taken:
    1) Method Object - This class was effectively a method object already, so I used the second step from Method Object - move local variables to class fields to make it easier to untangle the long method.
    2) Extract Method - Extracted what became the _parse_line() method, which is the part that took the trimmed line, applied the regex pattern, and stored the contents of the match group on the object.
    3) Method Object - I applied the moving local variables to class fields part of Method Object again to move the args local variable that was used by two separate parts of the long method, which were then extracted in the next two steps.
    4) Extract Method - Extracted what became the _prepare_command() method, which was the part that took the data that was parsed, used the look up table, and prepared the information that is needed to interact with the drawer
    5) Extract Method - Extracted what became the _exectute_command() method, which is the part that was interacting with the drawer object. Also extracted the logging of the output to a separate method for readability purposes.
    6) Extract Method - Extracted what became the _prepare_line() method, which is the part that trimmed excess whitespace off each end of the string and checked to see if it was actually blank or not. This involved deciding how to handle the fact that failng this check currently just led to a continue statement to skip to the next iteration of the parsing loop. In the end I made the function return a boolean value to indicate whether the line should continue to be parsed or not.
    7) Ran PEP8 validation over the code and fixed minor warnings

Testing Done:
    At this time, the groups tester has not yet supplied any unit tests, so I needed to test manually. After each step documented above, I ran the code through several variations of commands that I had prepared. Some of these were designed to throw specific errors so I could view if the expected error output had been displayed. The output log was printed to the console for examining, and I could see the output to the drawer. This helped me catch several times where the code had actually stopped working as intended and find the bugs fairly quickly.

Effectiveness Evaluation:
    I think that this refactoring has really helped overall. The parse method is now only 24 lines long, which includes spacing and excetion handling, and most of it is calls to methods with descriptive names that indicate the steps being taken. Each of these shorter methods handles one aspect of parsing the line, and is much easier to understand. Some of them had previously had their error handling quite far separated from the remainder of the logic due to indentation, and this was difficult to grasp. It should also be much easier to identify and handle other bad smells now that the different parts of the algorithm have been separated out.